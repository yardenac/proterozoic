#!/usr/bin/bash

self=$(readlink -e "$0") || exit 1
self=$(dirname "${self}") || exit 1

. /etc/ppz.conf
. "$self/../share/ppz/bash.functions"

root_do() {
    local cmd=() sudo=$useroot
    for arg; do
        case "$arg" in
            --quietfail) sudo=false;;
            *) cmd+=("$arg");;
        esac
    done
    if am_root; then
        "${cmd[@]}"
    elif ! $sudo; then
        return 1
    elif sudo -n true &>/dev/null; then
         sudo "${cmd[@]}"
    elif askyn "Do you want to use sudo?"; then
         sudo "${cmd[@]}"
    else
        useroot=false
        verbosely 1 $v "" "root would do ${cmd[*]}"
    fi; :
}

v=stamp loop=false c=p=20 t=15 useroot=true lock=false
fifo=/tmp/.$(uniq_token)
lockfile=/run/keep-net-up/lock
trap "root_do --quietfail rm -f $fifo $lockfile; exit;" HUP QUIT INT TERM ABRT TSTP CONT EXIT
for arg; do
    case "$arg" in
        --loop)    loop=true; lock=true;;
        --noroot)  am_root && {
                        echo_red "Cannot run --noroot as root."
                        exit 1
                    } || {
                        useroot=false
                        lock=false
                    };;
        --quiet)   v=min;; # outputs p up loops per line
        --silent)  v=none;;
        --errors)  v=errors;;
        --nostamp) v=all;;
        *)         echo_red "WEIRD ARG: $arg";;
    esac
done

if [ -f "$lockfile" ]; then
    echo "Another keep-net-up process is already running: "$(cat $lockfile)
    if "$lock"; then
        echo "Exiting."
        trap "" EXIT
        exit
    else
        if root_do true; then
            echo "Continuing because of --nolock"
        else
            echo "Cannot lock without root. Continuing."
        fi
    fi
else
    root_do --quietfail bash -c "echo $$ > $lockfile" || echo "Cannot write lock without root. We may get company."
fi

test_tor() {
   fwget 6 0 http://zqktlwi4fecvo6ri.onion/ http://127.0.0.1:8118 | grep -iq hidden\ wiki || \
   fwget 10 0 http://duskgytldkxiuqc6.onion/ http://127.0.0.1:8118 | grep -iq rendezvous || \
   fwget 14 1 http://3g2upl4pq6kufc4m.onion/ http://127.0.0.1:8118 | grep -iq "doesn't track you" || \
   fwget 18 2 http://pubdrop4dw6rk3aq.onion/ http://127.0.0.1:8118 | grep -iq securedrop
#   fwget 10 1 http://4thievzv3hh26qeh.onion/ http://127.0.0.1:8118 | grep -iq "Four Thieves Vinegar" || \
#   fwget 10 1 https://www.facebookcorewwwi.onion/ http://127.0.0.1:8118 | grep -iq "facebook" || \
#   fwget 10 1 https://www.nytimes3xbfgragh.onion/ http://127.0.0.1:8118 | grep -iq "The New York Times: Find breaking news, multimedia, reviews" || \
#   fwget 10 1 http://fncuwbiisyh6ak3i.onion/ http://127.0.0.1:8118 | grep -iq keybase
}
ping_test() {
    ping -i 0.4 -c 5 -w 12 -nq "$@"
}
restart_if_old() {
    # restart services unless that just happened really recently
    for arg; do
        local last=$(systemctl show "$arg" --property=ActiveEnterTimestamp)
        [ "$(( $(date +%s) - $(date -d "${last##*=}" +%s) ))" -lt 60 ] && {
            echo_red "Not restarting $arg - too soon"
            continue
        }
        root_do systemctl restart "$arg"
    done
}
journal_wait() {
    # true if journal unit $1 prints $2 within $3 secs, otherwise false
    local pid unit=$1 string=$2 timeout=${3:-15}
    local start=$(date +%s) prefix=${jw_prefix:-}
    mkfifo "$fifo" || return
    timeout -k 5 "$timeout" journalctl -xfn 0 -u "$unit" > "$fifo" & pid=$!
    while read; do
        secs=$(( "$(date +%s)" - start ))
        [ $v = stamp ] && echo_spaces_return "$REPLY"
        [[ "$REPLY" =~ "$string" ]] || continue
        verbosely 1 $v "" "FOUND IN JOURNAL AFTER ${secs}s: $string"
        kill "$pid"
        rm -f "$fifo"
        return
    done < "$fifo"
    wait
    secs=$(( "$(date +%s)" - start ))
    verbosely 1 $v "" "NOT FOUND IN JOURNAL AFTER ${secs}s: $string"
    rm -f "$fifo"
    c=$p
    return 1
}

shopt -s expand_aliases
alias revpn='{
   restart_if_old openvpn-client@\*.service
   am_root || break
   journal_wait "system-openvpn\x2dclient.slice" "Initialization Sequence Completed" 120
   continue
}'
do_network_test() {
    local dev wifidev gateway vpn_local vpn_gateway
    local userscript=$HOME/.config/bin/test_network.sh

    # figure out what the wifi device is called
    for dev in $(ip link show | awk '/^[0-9]/ {print $2}'); do
        case "${dev%:}" in
            lo|docker*|eno*|enp*|eth*|lxcbr*|tun*) continue;;
            wlan*|wlp*) wifidev=${dev%:}; break;;
            *)     echo "WEIRD DEVICE: $dev";;
        esac
    done

    # check for local gateway
    while :; do
        gateway=$(ip route | awk '/^default via/ { print $3}')
        [ "$gateway" ] && ping_test "$gateway" &>/dev/null
        verbosely $? $v "defer:GATEWAY UP" "GATEWAY DOWN" && break || {
                root_do ip route flush table main
                for module in "${WIFI_MODULES[@]}"; do
                    root_do modprobe -r "$module"
                done
                restart_if_old ip{,6}tables systemd-networkd wpa_supplicant@$wifidev
                am_root || break
                journal_wait system-wpa_supplicant.slice CTRL-EVENT-CONNECTED 20
            }
    done

    # check openvpn
    tries=2
    systemctl --quiet is-active openvpn-client@\*.service
    verbosely $? $v "" "" && while :; do if let tries--; then
        vpn_local=$(ip address show dev tun0 scope global | awk '($1 == "inet") {print $2}') \
            && [[ "$vpn_local" =~ ^[0-9\.]+/[0-9]+$ ]] \
            && ping_test "${vpn_local%%/*}" &>/dev/null
        verbosely $? $v "" "VPN DOWN LOCALLY" || revpn

        vpn_gateway=$(ip route show dev tun0 via "$vpn_local" | awk '{print $3; exit}') \
            && [[ "$vpn_gateway" =~ ^[0-9\.]+$ ]] \
            && ping_test "${vpn_gateway%%/*}" &>/dev/null
        verbosely $? $v "" "VPN GATEWAY DOWN" || revpn

        ping_test 8.8.8.8 &>/dev/null
        verbosely $? $v "" "VPN IPV4 DOWN" || revpn

        ping_test -6 2001:4860:4860::8888 &>/dev/null
        verbosely $? $v "defer:VPN UP" "VPN DOWN" && break || revpn
    else
        return 1
    fi; done

    # check tor
    tries=2
    systemctl --quiet is-active tor
    verbosely $? $v "" "" && { # "DOING TOR TEST" "NO TOR TEST"
        while :; do if let tries--; then
            test_tor
            verbosely $? $v "defer:TOR UP" "TOR DOWN" && break || {
                    restart_if_old tor
                    am_root || break
                    journal_wait tor 'Bootstrapped 100% (done): Done' 30
                }
        else
           return 1
        fi; done
    }

    # check dns
    tries=2
    systemctl --quiet is-active systemd-resolved.service
    verbosely $? $v "" "" && { # "DOING DNS TEST" "NO DNS TEST"
        while :; do if let tries--; then
            [ "$(readlink -e /etc/resolv.conf)" = "/run/systemd/resolve/resolv.conf" ] || \
                root_do ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
            [ -f /run/systemd/resolve/resolv.conf ] && \
                [ "$(dig +short ns1.linode.com A)" = 162.159.27.72 ]
            verbosely $? $v "defer:DNS UP" "DNS DOWN" && break || {
                    restart_if_old systemd-resolved
                    am_root || break
                    sleep 5
                }
        else
           return 1
        fi; done
    }

    [ $v = min ] && {
        echo_green_n "UP "
        if ! let --c; then
            echo
            c=$p
        fi
    }

    if [ -O "$userscript" ] && [ -x "$userscript" ]; then
        verbosity=$v "$userscript"
        verbosely $? $v "USER SCRIPT OK" "USER SCRIPT FAILED"
    fi
}
do_loop() {
    while :; do
        do_network_test
        sleep $t
    done
}
$loop && do_loop || do_network_test
