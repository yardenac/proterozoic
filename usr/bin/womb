#!/usr/bin/bash

[ "x$EUID" = "x0" ] && {
    echo "Root should never run womb!"
    sleep 10
    exit 1
}
homedir_i_own() {
    local rv=0 c=1 try="$1" base="$1"
    # this echoes path to a homedir owned by $USER
    # returns 0 if homedir already existed
    # returns 1 if we had to create it
    # please FFS dont use homedirs with spaces :P
    until [ -d $try ] && [ -O $try ] && [ -a $try/.xinitrc ]; do
        [ ${base:0:5} = /tmp/ ] || {
            echo "Cannot make homedir unless it's in /tmp!"
            sleep 10
            exit 1
        }
        [ -a $try ] || {
            cp -PR --preserve=links,mode,timestamps /etc/skel.ppz $try
            chmod 700 $try
            break
        }
        # apparently it exists but not (dir + ours)
        [ -O $try ] && {
            # ours but not a dir
            rm -rf --one-file-system $try
        } || {
            # not ours, or rm failed
            export try=$base.$c
            let c++
            continue
        }
    done
    echo $try
}
setup_home() {
    case $HOME in
        /|/etc/skel.ppz) HOME="/tmp/$USER"
    esac
    export HOME=$(homedir_i_own $HOME)
    cd "$HOME"
}
setup_git() {
    [ -d .git ] && return
    git init
    git add --all .
    git config --global commit.gpgsign false
    git config --global push.gpgsign false
    git config --global user.email $USER@invalid.invalid
    git config --global user.name $USER
    git commit -m init
    /usr/bin/integrity.ppz
    . /usr/share/ppz/bash.functions
    set_proper_histfile
    xdg-mime default zathura-fullscreen.desktop application/pdf
    xdg-mime default zathura-fullscreen.desktop application/x-pdf
    git add --all .
    git commit -m setup
}
err() {
    echo "#################################"
    echo "#######"
    echo "#######      $*"
    echo "#######"
    echo "#################################"
    read
    exit
}
checktty() {
    case "$USER" in
        ex) local type=x;;
        ew) local type=wayland;;
        *) return 1;;
    esac

    local mytty="$(/usr/bin/tty 2>/dev/null)"
    mytty=${mytty#/dev/}

    local itspid="$(systemctl show "auto-$type@$mytty.service" --no-page 2>/dev/null | grep ^MainPID= 2>/dev/null)"
    itspid=${itspid##*=}

    # true if we are the main process of our own tty's service
    [ "$itspid" = "$PPID" ] || return 1

    # extra check
    [ "$mytty" = "tty$(mydisplay)" ] || return 1

    echo "${mytty#tty}"
}
user_setups() {
    if [ "$USER" = ex ]; then
        setup_home
        t=$(checktty) || return
        setup_git
        . /etc/ppz.conf
        [ "$WALLPAPER" ] && sed -i "s%/usr/share/ppz/wallpaper%$WALLPAPER%" ~/.fvwm/config
        [ -x /usr/bin/xinit ] || err "NO XINIT"
        exec /usr/bin/xinit -- /usr/bin/X :$t vt$t -f 0 -nolisten tcp -retro -logverbose 9
        exit $? #this makes respawn work
    elif [ "$USER" = ew ]; then
        setup_home
        t=$(checktty) || return
        setup_git
        . /etc/ppz.conf
        unset DISPLAY
        exec /usr/bin/weston
    fi
}
user_setups

case "${2%% *}" in
    rsync|git)   :;;
    *)      /usr/bin/integrity.ppz;;
esac

cd ~

# AFAICT, ssh invokes shells like: /bin/shell -c 'command'
# 'command' is passed as one string - further args to ssh
# are concatenated with spaces. So be very careful to
# escape filenames and such - anything with iffy spaced-ness
# should be a single string treated like input to "eval", like:
#
# ssh user@host 'echo hello\ world > ~/my\ file.txt'
exec -l /usr/bin/bash "$@"
