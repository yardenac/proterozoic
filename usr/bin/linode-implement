#!/bin/bash

# USAGE: linode-implement nickname

. /usr/share/ppz/bash.functions

[ -f ~/.config/linoderc ] || croak "No linoderc"
. ~/.config/linoderc
[[ "$1" =~ ^[a-z0-9]+$ ]] || croak "Invalid linode nickname"
func_exists linoderc_setvars_"$1" || croak "No such linode nickname"
linoderc_setvars_"$1"

latest_arch64=91
stock_kernel=138 # "latest 3.0 x86"
finnix_kernel=61
pv_kernel=95

LINODEURL='https://api.linode.com?api_key='$API_KEY'&api_action='
linodeid=$(curl -sS ${LINODEURL}'linode.list' | jshon -e DATA -e 1 -e LINODEID)
ssh_host_use=${LINODE_CONSOLE%%@*}@$(ssh_host_resolv ${LINODE_CONSOLE##*@}.linode.com)

echo "SSH HOST IS: $ssh_host_use"

do_or_report() {
	 [ "$1" == "say" ] && {
		  local say=1
		  shift
	 } || local say=0
	 local result=$(curl -sS ${LINODEURL}"$@")
	 (( $(echo $result | jshon -e ERRORARRAY -l) )) && {
		  echo "FAILED AT: $*"
		  echo $result | jshon
		  return 1
	 }; :
	 (( $say )) && echo "$result"
	 return 0
}
block_for_job() { #returns when no more jobs pending
	 while (( $(curl -sS ${LINODEURL}'linode.job.list&linodeid='$linodeid'&pendingonly=1' | jshon -e DATA -l) )); do
		  echo -n .
		  sleep 1
	 done
	 echo done!
}
block_for_shutdown() { #returns when linode shuts itself down
	 echo -n "Waiting for linode to shut down..."
	 while :; do
		  local status=$(ssh $ssh_host_use status)
		  case $status in
				'Powered Off')
					 echo done!
					 return;;
				Running|*)
					 echo -n .
					 sleep 5
					 continue
		  esac
	 done
}
block_for_ssh() { # returns when port 22 appears to be open on the machine
	 echo -n "Waiting for SSH server to be up..."
	 until nmap $LINODE_DOMAIN -p 22 -sV --version-all -oG - | grep -iq '22/open'; do
		  echo -n .
		  sleep 1
	 done
	 echo done!
}

destroy_running() {
	 local status=$(ssh $ssh_host_use status) || croak "No lish..."
	 echo "Linode status is: $status"
	 case $status in
		  'Powered Off') :;;
		  'Running')
				echo "Going to destroy running instance..."
				ssh $ssh_host_use destroy;;
		  *) echo "unrecognized status string: $status"
	 esac
	 echo "Removing previous linode from known_hosts"
	 ssh-keygen -qR $LINODE_DOMAIN
	 ssh-keygen -qR $LINODE_IP
	 ssh-keygen -qR $LINODE_DOMAIN,$LINODE_IP
}
update_stackscript() { local SS_COMMIT_TXT
	 local num_sss=$(curl -sS ${LINODEURL}'stackscript.list' | jshon -e DATA -l);
	 case $num_sss in
		  0)	echo "Creating new stackscript..."
				do_or_report 'stackscript.create&DistributionIDList='$latest_arch64'&label=AUTO&rev_note=first+commit' --data-urlencode script@$ss_file || return 1
#				ss_id=$(echo $result | jshon -e DATA -e StackScriptID)
				return
				;;
		  1)	ss_id=$(curl -sS ${LINODEURL}'stackscript.list' | jshon -e DATA -e 1 -e STACKSCRIPTID);;
		  2|*) croak "More than one stackscript? clean that shit up!";;
	 esac

	 # if we made it this far, there is exactly 1 stackscript with id # $ss_id
	 cmp -s $ss_file <(curl -sS ${LINODEURL}'stackscript.list&stackscriptid='$ss_id | jshon -e DATA -e 1 -e SCRIPT -u) && {
		  echo "Stackscript does not need updating"
		  return
	 }
	 usetvar SS_COMMIT_TXT "Please write a stackscript commit entry: " 'unnamed revision' ''
	 do_or_report 'stackscript.update&stackScriptID='$ss_id \
		  --data-urlencode script@$ss_file --data-urlencode rev_note="$SS_COMMIT_TXT" || return 1
}
delete_disks() {
	 while :; do
		  local disklist=$(curl -sS ${LINODEURL}'linode.disk.list&linodeid='$linodeid)
		  local numdisks=$(echo $disklist | jshon -e DATA -l)
		  echo "Disks left: $numdisks"
		  (( $numdisks )) || break # while there are disks left
		  local firstdiskid=$(echo $disklist | jshon -e DATA -e 1 -e DISKID)
		  echo -n "Deleting disk with id # $firstdiskid"
		  do_or_report 'linode.disk.delete&linodeid='$linodeid'&diskid='$firstdiskid || return 1
		  block_for_job
	 done
}
delete_configs() {
	 while :; do
		  local configlist=$(curl -sS ${LINODEURL}'linode.config.list&linodeid='$linodeid)
		  local numconfigs=$(echo $configlist | jshon -e DATA -l)
		  echo "Configs left: $numconfigs"
		  (( $numconfigs )) || break #while configs left
		  local firstconfig=$(echo $configlist | jshon -e DATA -e 1 -e ConfigID)
		  echo -n "Deleting config with id # $firstconfig"
		  do_or_report 'linode.config.delete&linodeid='$linodeid'&configid='$firstconfig || return 1
		  block_for_job
	 done
}
deploy() {
	 local result IFS=$'\n' ssdate=.$(date +%F.%H-%M-%S)
	 echo -n "Getting disk size... "
	 local totalhd=$(curl -sS ${LINODEURL}'linode.list' | jshon -e DATA -e 1 -e TOTALHD)
	 echo "${totalhd} MB"
	 echo -n "Creating disk image & config"
	 result=$(do_or_report say 'linode.disk.createfromstackscript&distributionid='$latest_arch64'&label=D'$ssdate'&size='$totalhd'&linodeid='$linodeid'&stackscriptid='$ss_id \
		  --data-urlencode stackscriptudfresponses='{"ss_hostname":"'$LINODE_HOST'","ss_mysqlpass":"'$mysqlpass'"}' \
		  --data-urlencode rootpass="$rootpass") || return 1
	 diskid=$(echo $result | jshon -e DATA -e DiskID)
	 result=$(do_or_report say 'linode.config.create&kernelid='$pv_kernel'&helper_xen=false&helper_automount=false&helper_depmod=false&label=NORMAL'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=$diskid,,,,,,,,) || return 1 #pv-grub
	 config_pvgrub=$(echo $result | jshon -e DATA -e ConfigID)
	 result=$(do_or_report say 'linode.config.create&kernelid='$finnix_kernel'&label=RESCUE'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=25665,$diskid,,,,,,,25669) || return 1 #finnix rescue
	 config_finnix=$(echo $result | jshon -e DATA -e ConfigID)
	 result=$(do_or_report say 'linode.config.create&kernelid='$stock_kernel'&label=INITIAL'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=$diskid,,,,,,,,) || return 1 #pre-linux-linode boot
	 config_prebuilt=$(echo $result | jshon -e DATA -e ConfigID)
	 block_for_job

	 echo -n "Booting now"
	 do_or_report 'linode.boot&linodeid='$linodeid'&configid='$config_prebuilt || return 1
	 block_for_job
	 block_for_shutdown

	 echo -n "Deleting the prebuilt-kernel config"
	 do_or_report 'linode.config.delete&linodeid='$linodeid'&configid='$config_prebuilt || return 1
	 block_for_job

	 echo -n "Booting the REAL one now!"
	 do_or_report 'linode.boot&linodeid='$linodeid'&configid='$config_pvgrub || return 1
	 block_for_job

	 block_for_ssh

	 echo "Scraping for valid SSH host credentials..."
	 ssh-keyscan -H $LINODE_DOMAIN >> ~/.ssh/known_hosts
	 ssh-keyscan -H $LINODE_IP >> ~/.ssh/known_hosts

	 # do initial decryption while we change default password
	 askyn "Try to ssh now?" && ssh -t $LINODE_USER@$LINODE_DOMAIN passwd

	 # instead of pushing git, do git_home_clone!
#	 askyn "git home stuff?" && {
#		  ssh $LINODE_USER@$LINODE_DOMAIN git_home_clone
#	 }
}
do_all() {
	 echo
	 echo -n "You probably want to detach any running ssh sessions, or they will hang."
	 askyn "This script will DESTROY YOUR EXISTING LINODE. Do you want to cancel?" && exit
	 for thing in \
		  destroy_running \
		  update_stackscript \
		  delete_disks \
		  delete_configs \
		  deploy; do

		  say_and_do $thing "$@" && continue
		  echo "$thing failed..."
		  return 1
	 done
}
do_all "$@"
