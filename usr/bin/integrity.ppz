#!/bin/bash
. /etc/rc.conf
. /usr/share/ppz/bash.functions

# functions should not assume anything. We might be running:
#   with or without root privs
#   interactively or with messed up input/output
#   before or after rc.multi scripts (they could be backgrounded!)
#   inside a chroot (check /etc/mtab)

echo_red HOME: ~
echo_red EUID: $EUID
echo_red UID: $UID
[ -s /etc/mtab ] || {
	 echo_red mtab:
	 cat /etc/mtab
	 echo_red mount:
	 mount
	 echo_red df:
	 df -ah
	 echo_red lo:
	 losetup -a
	 echo_red dm:
	 dmsetup info
	 echo_red ok.
}

integrity_rootpw() {
	 am_root && shell_is_interactive || return 0

	 # this is messy and needs attention
	 # checking is not this easy - hash is seeded
	 # write a program that simulates login to check?
	 # ^ should work for non-root user too!

	 while :; do
		  roothash=$(awk 'BEGIN {FS=":"} /^root:/ {print $2}' /etc/shadow)
		  case $roothash in
				'') askyn "Root pw sucks! Set it?" && passwd || return;;
				*) break
		  esac
	 done
}
integrity_emacsd() {
	 local F=~/.emacs.d
	 [ -L ${F} ] || {
		  [ -d ${F} ] && mv ${F} ${F}.$(uniq_token)
		  [ -a ${F} ] && echo "weird ${F}!" || ln -s /etc/.emacs.d ~/
	 }
	 am_root && {
		  enforce_perms 444 /etc/.emacs.d/init.el
		  enforce_perms 555 /etc/.emacs.d
	 }
}
integrity_bashhistory() {
	 # THIS IS A MESS
	 shopt -s nullglob
	 local RAW_F
	 local IFS=$'\n'
	 HISTFILE=${HISTFILE:-~/.bash_history}
	 touch ${HISTFILE} &>/dev/null
	 for RAW_F in $(ls -1 {/{root,home/*,media/green/*},~}/.bash_history "$HISTFILE" 2>/dev/null | sort -u); do
		  local F=$RAW_F
		  am_root || make_sure_its_mine "$F" || { # dont rearrange or might end up creating every file!
					 HISTFILE=/tmp/.bash.history.$USER
					 export XAUTHORITY=/tmp/.Xauthority.xuser
					 touch $HISTFILE
					 F=$HISTFILE
		  } || continue
		  echo -n HISTFILE: ${F}
		  local ATTRSET=
		  lsattr "$F" &>/dev/null && {
				ATTRSET=$(lsattr "$F")
				[ ${ATTRSET:5:1} = a ] && { echo ... A; continue; }
		  }
		  echo ... \  \  doing
		  skel_file=/etc/skel.ppz/.bash_history
		  ! [ -s "$F" ] && {
				rm -f ${F}
				cp -f ${skel_file} ${F}
		  } || {
				! cmp -s <(head -n 1 ${F}) <(head -n 1 ${skel_file}) \
					 && askyn "$F ("$(du -sh ${F} | cut -f 1)") has no skel prefix. Join them?" && {
					 
					 backup_file=${F}.ppz.$(date +%s)
					 mv ${F} ${backup_file}
					 cp ${skel_file} ${F}
					 cat ${backup_file} >> ${F}
					 cmp -s <(cat ${skel_file} ${backup_file} | md5sum) <(cat ${F} | md5sum) \
						  && rm ${backup_file} || echo_red "Delete ${backup_file} yourself, I wasn't sure..."
				}
		  }
		  am_root && [ "${ATTRSET:5:1}" = - ] && say_and_do chattr +a "$F"
	 done
}
integrity_locales() {
	 am_root || return
	 local L=$(locale)
	 [ "${L}" ] && return #has locale, so ok
	 askyn "You have no locale!? Should we fix this?" \
		  && echo "Oops, Not implemented yet..."
}
integrity_tz() {
	 am_root || return
	 local suspicious_tzs=(America/Vancouver America/New_York)
	 local matches=0
	 for stz in "${suspicious_tzs[@]}"; do
		  cmp -s /etc/localtime /usr/share/zoneinfo/$stz && let matches++
	 done
	 (( $matches )) || return 0
	 [ -a /etc/localtime.userok ] && return
	 local c=22; while let c--; do
		  usetvar TZONE "You have a default arch timezone. To keep it, press C-c or C-\ ...
To replace it, pick a new one: " /usr/share/zoneinfo/America/Los_Angeles USERCANCELLED || {
				echo_red "Still using default time zone!"
				break
		  }
		  [ "$TZONE" = "USERCANCELLED" ] && { #THIS WILL NEVER RUN! IT'S BROKEN!
				echo "If this file exists, it means the system is SUPPOSED to" \
					 "have the default timezone (Vancouver or NY). Otherwise," \
					 "root would always be prompted to change it." > /etc/localtime.userok
				echo_red "Default timezone kept. You won't be asked again."
				break
		  }
		  [ -f ${TZONE} ] && {
				cp -f ${TZONE} /etc/localtime
				break
		  }
		  echo_blue "That timezone doesn't exist."
	 done
}
integrity_simpleconf() {
	 am_root || return
	 [ -e /media/inmem ] || mkdir /media/inmem
	 grep -iEq ^/usr/bin/womb$ /etc/shells || echo /usr/bin/womb >> /etc/shells
	 grep -iEq '^sshd[ :	]*ALL[ :	]*ALLOW$' /etc/hosts.allow 2>/dev/null \
		  || echo 'sshd : ALL : ALLOW' >> /etc/hosts.allow
	 sed -i 's%^\(/bin/rm -rf /tmp.*\)$%\#\1%ig' /etc/rc.sysinit #comment
	 case $(hostname) in #uncomment
		  # needs a better test for linode-ness. probably check ip.
		  gabba)	sed -i 's%^\#\(server time.fremont.cbane.org.*\)$%\1%ig' /etc/ntp.conf;;
		  *)		sed -i 's%^\(server time.fremont.cbane.org.*\)$%\#\1%ig' /etc/ntp.conf;;
	 esac
	 mkdir -p /media/{arch-cold-r{w,o},rodinia,green,encuser,enc}
	 [ -L /snowball ] || ln -s /media/rodinia/pub /snowball
	 enforce_perms 440 /etc/sudoers.d/wheel
}
integrity_pacnew() {
	 return
	# TODO: check for pacnew files, do something with them
	 # is it better to `find` the filesystem
	 # or search pacman db for backup files and check those?
	 #also do ppznew
}
integrity_users() {
	 am_root || return

	 # "extra" users are declared in rc.conf. this makes sure they really exist.

	 local user v u_name u_nums u_home IFS=$'\n'
	 for user in $(awk '/^:/ { if ($2 == "user") print }' /etc/rc.conf); do

		  echo_red "DOING USER: $user"

		  IFS=$'\n\r\t ' v=($user)
		  u_name=${v[2]}
		  u_nums=${v[3]}
		  u_home=$(translate_encdev_path ${v[5]}) || continue
		  # if we're still here, u_home is now a real path :)
		  # it's not the job of this function to CREATE the path
		  # if user isn't in passwd, create it
		  grep -qiE "^${u_name}:" /etc/passwd || {
				echo_red "adding user ${u_name}!"
				useradd -lMNd ${u_home} -u ${u_nums%%:*} -g ${u_nums##*:} -s ${v[4]} ${u_name}
		  }
	 done
}
ribbit() {
	 local num=2
	 [[ "$1" =~ ^[0-9]+$ ]] && {
		  num=$1
		  shift
	 }
	 echo_red "$@"
	 continue $num
}
integrity_encdev() {
	 local size arg name type dev{,_canon,_intermediate} mountpoint mapname loop IFS=$'\n\r\t '

	 # makes sure device exists and is luks
	 # creates it with default key if necessary

	 # if making it the FIRST time, we open it once to format it.
	 # otherwise, we dont open it

	 echo_red "DOING ENCDEV: $@"

	 name=$3
	 dev=$4
	 size=32m
	 mapname=$name
	 mountpoint=/media/$name
	 shift 4
	 for arg; do
		  shopt -s nocasematch
		  if [ ${arg:0:1} = / ]; then 						# it's a path, mountpoint
				mountpoint=$arg
		  elif [[ $arg =~ ^[0-9.]+[bskmgtp]?$ ]]; then	# it's a size
				size=$arg
		  elif [[ $arg =~ ^[a-z0-9]+$ ]]; then		# its a mapper name
				mapname=$arg
		  else
				ribbit 3 "What the hell is this? $arg"
		  fi
	 done

	 # convert to number of 512 byte blocks - both dd and blockdev use this
	 size=$(fsconv $size 'in' s)

	 # if it's a uuid
	 if [[ "$dev" =~ ^[a-f0-9]{8}(-[a-f0-9]{4}){3}-[a-f0-9]{12}$ ]]; then
		  dev=/dev/disk/by-uuid/$dev
	 fi

	 # make sure it exists
	 until dev_canon=$(readlink -e "$dev"); do
		  # apparently it doesn't. if it was supposed to be a device, screw that
		  [ "${dev:0:4}" = /dev ] && ribbit 3 "edev '$dev' doesn't exist! Check hardware."
		  # otherwise, we make it
		  echo_red "Encrypted loopback file doesn't exist! Touching it..."
		  am_root || ribbit 3 "Root must fix."
		  local dev_intermediate=$(readlink -m "$dev")
		  mkdir -p "$(dirname "$dev_intermediate")"
		  touch "$dev_intermediate"
		  chmod 600 "$dev_intermediate"
	 done
	 dev=$dev_canon
	 
	 # make sure it's luks formatted
	 until type=$(blkid -o value -s TYPE "$dev") && [ "$type" = crypto_LUKS ]; do
		  echo_red "$dev is NOT luks formatted!"
		  am_root || ribbit 3 "Non-root user cannot fix or create the LUKS device"
		  kernel_supports_luks || ribbit 3 "no xts encryption, cannot fix or create"
		  # make sure dev is either empty OR we have permission to override!
		  [ -s "$dev" ] && {
				[ "$type" ] \
					 && echo_red "Encrypted device $edev is formatted as: $type!" \
					 || echo_red "Encrypted device $edev is not in a known block format!"
				shell_is_interactive || ribbit 3 "Will not overwrite anything without your permission..."
				askyn "Skip and preserve data? (Otherwise we'll overwrite it...)" && ribbit 3
		  }

		  # fill w/random data, using given size if it's a file (or all of partition)
		  [ -b $dev ] \
				&& dd_with_progress if=/dev/urandom of="$dev" bs=512 \
				|| dd_with_progress if=/dev/urandom of="$dev" bs=512 count=$size

		  # now format luks, using default key
		  echo -n "loosest slots in town" | \
				cryptsetup -c aes-xts-plain64 -s 512 -h whirlpool -qv luksFormat "$dev" -i 9999 -d -

		  [ -s /etc/mtab ] || {
				echo_red "WE ARE DOING DEV MAPPINGS IN A CHROOT! LOOK FOR ERRORS!"
		  }

		  # open it once, format ext4, then close it
		  echo -n "loosest slots in town" | \
				cryptsetup luksOpen "$dev" "$mapname" -d - \
				|| ribbit 3 "Can't open luks device we just made! Something is fucked."

		  # format ext4
		  . /usr/share/ppz/bash.functions.install
		  format_ext4 automatic /dev/mapper/$mapname || ribbit 3 "Formatting ext4 failed"

		  if type=$(blkid -o value -s TYPE /dev/mapper/$mapname) \
				&& [ "$type" = ext4 ]; then
				echo "Formatting ext4 was successful"
		  else
				ribbit 3 "Formatting $dev ext4 returned 0 but did not seem to work."
		  fi

		  cryptsetup luksClose $mapname
	 done

	 # make sure size is right
	 [ -b "$dev" ] || { # we dont resize block devices
		  # we know dev is path to a loopback file

		  # $size is number of 512-byte sectors we want it to be.
		  # We subtract from that the number of sectors it ACTUALLY is.
		  sectors_wanting=$(( $size - ( $(stat -c %s /tmp/testloop) / 512 ) ))

		  [[ "$sectors_wanting" =~ ^[0-9]+$ ]] || ribbit "Reading loop size fucked up."

		  if [ $sectors_wanting -lt 0 ]; then
				ribbit "Must shrink loopback devices manually - good luck..."
		  elif [ $sectors_wanting -eq 0 ]; then
				echo "$dev is correct size: $size sectors"
		  else
				# this means we grow the size
				am_root || ribbit "$dev is the wrong size - root must fix!"
				echo "Growing $dev by $sectors_wanting sectors to $size sectors"
				dd if=/dev/urandom bs=512 count=$sectors_wanting >> $dev \
					 || ribbit "dd grow command failed"

				# for each loopback that might exist for $dev
				# will this work in a chroot??
				for loop in $(losetup -j $dev | sed 's%^\(/[^:]*\):.*$%\1%ig;t;d'); do
					 # make it read new size
					 losetup -c $loop

					 # if mapped, resize that too
					 # running this for each loop is a bug, but for now i'll be lazy
					 # and assume there will always be just one loop :P
					 cryptsetup status $mapname \
						  | grep -iq /dev/mapper/$mapname' is active and is in use.' && {

						  # code to read current map size - probably dont need?
						  #$(blockdev --getsz /dev/mapper/$mapname)

						  # resize mapping
						  cryptsetup resize $mapname

						  # resize filesystem inside mapping - online or offline
						  # if we're running in a chroot, this will (should) also fail
						  grep -iqE ^/dev/mapper/$mapname /etc/mtab \
								&& mount -o remount,resize /dev/mapper/$mapname \
								|| resize2fs /dev/mapper/$mapname
					 }
				done
		  fi
	 }

	 # we have made sure the luks device exists, is formatted and sized right
	 # if we just formatted luks, we also created the filesystem inside
	 # for root, this is enough.
	 am_root && return

	 # if still here, we are not root.
	 # we are interested it opening up OUR device for use.
	 # openmap gives us privilege to do that.

	 # right now takes usename as argument - maybe $UID is enough? testing.
	 sudo /usr/sbin/openmap $(whoami)
}
integrity_encdevs() { local devcond devline IFS=$'\n'

	 # which devices do we care about? all (if root) or just ours?
	 am_root \
		  && devcond='(1)' \
		  || devcond='($3 == "'$(encdev_from_user)'")'

	 echo_red "encdevs we care about: $devcond"

	 # for devices we care about, make sure they all work
	 for devline in $(awk '/^:/ {
					if (($2 == "edev") && '"$devcond"') print
				}' /etc/rc.conf); do
		  IFS=$'\n\r\t '
		  IFS=$'\n\r\t ' integrity_encdev $devline
	 done
}
integrity_inittab() {
	 return
	 case $(hostname) in
		  gabba) :;;#one fgetty in inittab
		  *) :;;#2 or 3 of them?
	 esac
}
integrity_hosts() {
	 am_root || return
	 local OLDFILE=/etc/hosts
	 local NEWFILE=/tmp/root.etchosts.$(uniq_token)
	 {
		  cat <<-EOF
			THISVER 2011071201
			ASSIGN 127.0.0.1		localhost.localdomain   localhost ${HOSTNAME} ${HOSTNAME_ALIASES}
			ASSIGN ::1				localhost.localdomain   localhost ${HOSTNAME} ${HOSTNAME_ALIASES}
			ASSIGN fe00::0			ip6-localnet
			ASSIGN ff00::0			ip6-mcastprefix
			ASSIGN ff02::1			ip6-allnodes
			ASSIGN ff02::2			ip6-allrouters
			ASSIGN ff02::3			ip6-allhosts
			ASSIGN 192.168.1.200
			ASSIGN 192.168.1.226 fjm-wl
			ASSIGN 192.168.1.227 fjm-eth
			ASSIGN 192.168.1.228 dusty scaly
			ASSIGN 192.168.1.229 lucky lucky-wf lucky-wifi edie-wl
			ASSIGN 192.168.1.230 
			ASSIGN 192.168.1.231 
			ASSIGN 192.168.1.232
			ASSIGN 192.168.1.233 #vonage 
			ASSIGN 192.168.1.234 remorseful emo arch archean sarcopty
			ASSIGN 192.168.3.200 #sonic.router
			ASSIGN 192.168.3.233 
			ASSIGN 69.162.252.119 #shop.pageturnereditions.com
			ASSIGN 173.228.38.224 
			ASSIGN 208.111.34.185
			ASSIGN 208.111.39.115 g i w m k d db dm ih ihm bs s e se es he eh h lj ljm map me nz y b r v apa aur p yelp arch archp moz l n news o t grad gradd gadd music tv
			EOF
		  cat ${OLDFILE}
	 } | awk -f /usr/share/ppz/awk-hosts > ${NEWFILE}
	 cmp -s ${OLDFILE} ${NEWFILE} || {
		  mv ${OLDFILE}{,.orig.$(uniq_token)}
		  mv ${NEWFILE} ${OLDFILE}
		  hostname ${HOSTNAME}
	 }
}
can_work_with_boot() {
	 grep -iq /boot /etc/fstab \
		  && ! [ -d /boot/grub ] \
		  && return 1 #should be mounted but isnt
	 [ -w /boot ] && return #can write to it - ok
	 grep -iq /boot /etc/mtab && return 1 #probably chrooted
	 mount -o remount,rw /boot &>/dev/null
	 [ -w /boot ] || return 1 #weve done all we can
}
remote_sync_file() { # $0 '/local/path' 'md5sum464a702cf...' 'http://source'
	 check_file ${1} ${2} && return
	 [ "${1:0:6}" = /boot/ ] && ! can_work_with_boot && return 1
	 mkdir -p $(dirname ${1})
	 wget ${3} -qO ${1}
	 check_file ${1} ${2} && {
		  echo_red "Successfully retrieved $1"
	 } || {
		  rm -f ${1}
		  echo_red "Problem downloading $1 - have to get it later"
	 }
	 [ "${1:0:6}" = /boot/ ] && mount -o remount,ro /boot &>/dev/null; :
}
integrity_net() {
	 test_network_once 5 && {
		  ! python-ntp && am_root && askyn "Sync kernel & hwclock with ntpdate?" && {
				ntpdate pool.ntp.org
				echo "0.0 0 0.0" > /var/lib/hwclock/adjtime
				hwclock --systohc --utc
		  } || true
	 } || {
		  echo -n "No fast connectivity... Local system time: "
		  echo_red $(date '+%l:%M:%S (%A %B %e, %Y)')
		  return
	 }
	 am_root && {
		  grep -iq broadcast /etc/rc.d/network || {
				mv -f /etc/rc.d/network{,.forget}
				wget http://projects.archlinux.org/initscripts.git/plain/network -qO /etc/rc.d/network
				chmod +x /etc/rc.d/network
				askyn "Had to replace netscript from git! Did download work ok?" && rm -f /etc/rc.d/network.forget
		  }
		  eval $(awk '/^:/ {
				if ($2 == "sync") {
					printf "remote_sync_file %s %s %s;\n", $3,$4,$5
				}
		  }' /etc/rc.conf)
	 }
}
integrity_sshd() {
	 am_root || return
	 local OLDFILE=/etc/ssh/sshd_config
	 local NEWFILE=${OLDFILE}.$(uniq_token)
	 cat > ${NEWFILE} <<-EOF
		ListenAddress 0.0.0.0
		Protocol 2
		LoginGraceTime 2m
		PermitRootLogin no
		#MaxAuthTries 6
		#MaxSessions 10
		#PasswordAuthentication yes
		ChallengeResponseAuthentication no
		UsePAM yes
		X11Forwarding no
		#X11DisplayOffset 10
		PrintMotd no
		PrintLastLog no
		#UseLogin no
		#MaxStartups 10
		#PermitTunnel no
		IgnoreRhosts yes
		HostBasedAuthentication no
		PermitEmptyPasswords no
		Subsystem	sftp	/usr/lib/ssh/sftp-server

		AllowUsers
		EOF
	 for USER in ${SSH_USERS[@]}; do
		  case "${USER:0:1}" in
				\!|@)	local BAREUSER=${USER:1};;
				*)		local BAREUSER=${USER};;
		  esac
		  local USER_ALLOWED=yes
		  [ ${USER:0:1} = \! ] && USER_ALLOWED=no
		  [ ${BAREUSER} = root ] && \
				sed -i 's/^#*\(PermitRootLogin\).*$/\1 '${USER_ALLOWED}'/gi' ${NEWFILE}
		  [ ${USER_ALLOWED} = yes ] && sed -i 's/^#*\(AllowUsers\(\s[a-zA-Z]*\)*\)$/\1 '${BAREUSER}'/gi' ${NEWFILE}
		  [ ${USER:0:1} = @ ] && cat >> ${NEWFILE} <<-EOF

			Match User ${BAREUSER}
			   ChrootDirectory $(home_actual ${BAREUSER})
			   X11Forwarding no
			   AllowTcpForwarding no
			   ForceCommand cvs server
			EOF
	 done
	 conffile_checkup "${OLDFILE}" "${NEWFILE}" && {
		  #file changed
		  pkill -HUP -f /usr/sbin/sshd; SSHD_ON=$?
	 } || {
		  #file didnt change
		  [ -n "$(pgrep -f /usr/sbin/sshd)" ]; SSHD_ON=$?
	 }
	 ifn $SSHD_ON || {
		  askyn "sshd is not running. Start it?" && {
				/etc/rc.d/sshd start
		  } || echo_red "did not start sshd"
	 }
}

# this gets run in:
#   post_install
#    functions.d
#     bash.bashrc.local
#      post_upgrade

#echo INTERGRITY WAS CALLED AS: "$0 $@"
#echo PARENT PROC IS: $(ps --pid $(ps --pid $$ -o ppid=) -o args=)
#pstree -phaun

for F in rootpw emacsd bashhistory locales tz \
	 simpleconf pacnew users encdevs \
	 inittab hosts net sshd; do
#	 echo doing ${F}
	 integrity_${F} || echo "${F} failed..."
done
