#!/bin/bash

# Check an arch repository for AUR updates

# http://stackoverflow.com/questions/4023830/bash-how-compare-two-strings-in-version-format
vergt () {
	 [[ "$1" == "$2" ]] && return 1
	 local one=${1//-/.} two=${2//-/.}
	 local IFS=.
	 local i ver1=($one) ver2=($two)
	 for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
		  ver1[i]=0
	 done
	 for ((i=0; i<${#ver1[@]}; i++)); do
		  [[ -z ${ver2[i]} ]] && ver2[i]=0
		  ((36#${ver1[i]} > 36#${ver2[i]})) && return 0
		  ((36#${ver1[i]} < 36#${ver2[i]})) && return 1
	 done
	 return 1
}
is_pkg() {
	 local type
	 type=$(file -ib "$1") || return 1
	 case "${type%%;*}" in
		  application/x-xz|application/x-gzip) return 0;;
		  *) return 1
	 esac
	 return 0
}
ck_pkg() {
	 local file pkgdeets name vers_here vers_there url giturl date vers_github
	 file=$(readlink -e "$1") || return 1
	 is_pkg "$file" || return 1
	 pkgdeets=($(tar -xOf "$file" .PKGINFO 2>/dev/null | awk '/^pkg(name|ver) *=/ {print $3}')) || return 1
	 (( "${#pkgdeets[@]}" )) || return 1
	 name=${pkgdeets[0]}
	 vers_here=${pkgdeets[1]}
	 vers_there=$(cower --search --format="%v" "^${name}$") || return 1
	 [[ "$vers_here" == "$vers_there" ]] && {
		  [[ $verbose == y ]] && echo_blue "$name $vers_here "
		  return
	 }
	 if vergt "$vers_here" "$vers_there"; then
		  url=$(cower --search --format="%u" "^${name}$")
		  giturl=$(echo "$url" | sed 's_^https://github.com/_https://api.github.com/repos/_; t; d')
		  [ "$giturl" ] || {
				echo_blue_n "$name $vers_here "
				echo_cyan "$vers_there"
				return
		  }
		  date=$(curl -s "$giturl"/commits | jshon -e 0 -e commit -e author -e date | tr -d \")
		  vers_github=$(date -d "$date" "+%Y%m%d-1")
		  vergt "$vers_github" "$vers_here" || return
		  echo_blue_n "$name $vers_here "
		  echo_cyan_n "$vers_github"
		  echo " $url/commits/master"
	 else
		  echo_blue_n "$name $vers_here "
		  echo_yellow "$vers_there"
	 fi
}
is_repo() {
	 [ -d "$1" ] || return 1
	 local item=${1%/}
	 is db "$item"/*.db.tar.gz && return 0
	 return 1
}
ck_repo() {
	 local file
	 [ "$print_repos" ] && echo_green "$1"
	 find -P "$1" -xdev -maxdepth 1 -ignore_readdir_race -type f | sort | while read file; do
		  ck_pkg "$file"
	 done
}

. /usr/share/ppz/bash.functions

shopt -s nullglob

repos=() pkgs=()
verbose=''
for arg; do
	 case "$arg" in
		  -v|--verbose) verbose=y; continue;;
	 esac
	 if item=$(full_path_strict "$arg"); then
		  if is_repo "$item"; then
				repos+=("$item")
		  elif is_pkg "$item"; then
				pkgs+=("$item")
		  else
				echo_red "Not a repo or pkg: $item"
		  fi
	 else
		  echo_red "Unknown option: $item"
	 fi
done

(( ${#repos[@]} )) || {
	 is_repo ./ && repos+=(./)
}

(( ${#repos[@]} + ${#pkgs[@]} )) || croak "USAGE: ckrepo repo/ [repo/]"

print_repos=''
[ ${#repos[@]} -gt 1 ] || [ "$verbose" ] && print_repos=y

for repo in "${repos[@]}"; do
	 ck_repo "$repo"
done

for pkg in "${pkgs[@]}"; do
	 ck_pkg "$pkg"
done
