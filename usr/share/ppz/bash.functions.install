#!/usr/bin/bash

static_per_nic() {
	 # prints network envfile to stdout, based on current values (probably from dhcp)
	 ip addr show dev $1 | awk -f <(cat <<-'EOF'
		$1 ~ /^inet$/ {
			gsub(/\//," ")
			print "address=" $2 "\nnetmask=" $3 "\nbroadcast=" $5
		}
		EOF
	 )
	 ip route show dev $1 | awk '/^default via/ {print "gateway=" $3}'
	 echo 'resolv="'$(grex /etc/resolv.conf | { while read; do echo -n "$REPLY"'\\n'; done; })\"
}

static_networking_from_runtime() {
	 local arg dev target='' devs=()

	 for arg; do
		  case "$arg" in
				eth0) devs+=("$arg");;
				*)
					 if [ -d "$arg"]; then
						  target="$(readlink -e "$arg")"
					 else
						  echo_red "weird arg to static_networking: $arg"
					 fi
		  esac
	 done

	 # if no dev, use first non-lo network interface
	 (( ${#devs[@]} )) || devs+=($(ip link | awk '/^[0-9]+:/ {sub(/:/,"",$2); if ($2 ~ "^(lo|dummy)[0-9]*$") next; print $2; exit}'))

	 for dev in "${devs[@]}"; do
		  if am_root; then
				mkdir -p "$target/etc/conf.d"
				static_per_nic "$dev" >| "$target/etc/conf.d/network.$dev" \
					 && echo_blue "generated $target/etc/conf.d/network.$dev"
		  else
				echo_blue "If I were root, I'd write this to: $target/etc/conf.d/network.$dev"
				static_per_nic "$dev"
		  fi
	 done
}

fix_initcpio_ppz() {
	 local mmodules TARGET=${1%%/}
	 grep -iqE '^HOOKS="[^"]*ppz_tmp[^"]*"' ${TARGET}/etc/mkinitcpio.conf || {
		  askyn "Add ppz_tmp to HOOKS?" \
				&& sed -i 's/^\(HOOKS="[^"]*\)"/\1 ppz_tmp"/ig' ${TARGET}/etc/mkinitcpio.conf
	 }
	 usetvar mmodules "Add any initrd modules (delete what you dont want): " 'radeon nvidia intel_agp i915' ''
	 sed -i 's/^\(MODULES="[^"]*\)"/\1 '"${mmodules[@]}"'"/ig' ${TARGET}/etc/mkinitcpio.conf
	 grex ${TARGET}/etc/mkinitcpio.conf
	 askyn "Above is ${TARGET}/etc/mkinitcpio.conf. You have a chance to edit
			in another tty, if you wish. YES here to rebuild." && {
		  chroot ${TARGET} /usr/bin/mkinitcpio -p linux
	 }
}

install_grub_ppz() { #USAGE: install_grub /media/targay /dev/sda1 hostname_of_target
	 local TARGET=${1%%/}
	 local BOOT_DEVICE_CN=${2}
	 cp -af ${TARGET}/usr/lib/grub/i386-pc/* ${TARGET}/boot/grub/
	 cp -f ${TARGET}{/usr/share/ppz/default/menu.lst,/boot/grub/menu.lst}
	 local DMAPF=/tmp/grub-device-map-ppz
	 echo "quit" | ${TARGET}/sbin/grub --no-floppy --device-map ${DMAPF}
	 local BOOT_RAWDEVICE=$(echo $BOOT_DEVICE_CN | sed 's/[0-9]*$//')
	 local BOOT_PARTNUMBR=$(echo $BOOT_DEVICE_CN | sed 's/^[^0-9]*//')
	 let BOOT_PARTNUMBR-- || echo "partition number was zero -- wtf??"
	 local BIOS_HDNUM=$(awk '$2 == "'$BOOT_RAWDEVICE'" {gsub(/[()]/,"",$1);print $1}' ${DMAPF})
	 local GRUB_DEV="(${BIOS_HDNUM},${BOOT_PARTNUMBR})"
	 local ROOT_UUID=$(blkid -o value -s UUID ${3})
	 sed -i \
		  -e s/%SET_HOSTNAME%/${4// 	}/ig \
		  -e s/%SET_BOOTPART%/${GRUB_DEV}/ig \
		  -e 's/%SET_ROOT_DEVICE%/\/dev\/disk\/by-uuid\/'${ROOT_UUID//\//\\\/}/ig ${TARGET}/boot/grub/menu.lst
	 while :; do
		 usetvar confirm GRUBPW "Enter a (raw) grub password, if you like: " '' '' -s # unset so doesnt need to be local
		 [ "$GRUBPW" ] || break
		 local GHASH=$(echo -e "md5crypt\n${GRUBPW}\nquit" | ${TARGET}/sbin/grub --no-floppy \
			  --batch --device-map ${DMAPF} | sed 's/^Encrypted: //ig;t;d') #sed commands: only print if matched
		 [ "$GHASH" ] && [ "$GHASH" = "${GHASH// }" ] \
			  && sed -i 's/%SET_PASSWORD%/'${GHASH//\//\\\/}'/ig' ${TARGET}/boot/grub/menu.lst \
			  || echo_red "Setting grub password failed somehow..."
		 break
	 done
	 unset GHASH GRUBPW GRUBPWDUB
	 sed -i 's/\(^.*%SET_PASSWORD%\)/#\1/ig' ${TARGET}/boot/grub/menu.lst
	 sed 's/^/#/ig' ${DMAPF} >> ${TARGET}/boot/grub/menu.lst
	 blkid | sed 's/^/#/ig' >> ${TARGET}/boot/grub/menu.lst
	 grep -iqE '^[^#].*%SET_' ${TARGET}/boot/grub/menu.lst && askyn "Something is still wrong with
					${TARGET}/boot/grub/menu.lst. You should really check it..."
	 read -d W GRUBCOMMANDS <<-EOF

		device ($BIOS_HDNUM) $BOOT_RAWDEVICE
		geometry ($BIOS_HDNUM)
		root ($BIOS_HDNUM,$BOOT_PARTNUMBR)
		setup ($BIOS_HDNUM)
		EOF
	 askyn "ENTER to Install grub in MBR of ${BOOT_RAWDEVICE} aka ($BIOS_HDNUM),
					pointing to ${BOOT_DEVICE_CN} aka ($BIOS_HDNUM,$BOOT_PARTNUMBR),
					as follows: ${GRUBCOMMANDS}" && {
		  echo "$GRUBCOMMANDS" | ${TARGET}/sbin/grub --no-floppy --batch --device-map ${DMAPF}
	 }
#		  rm -f ${DMAPF}
}
format_ext4() { local BBOPT=q
	 case "$1" in
		  automatic|auto) shift;;
		  interactive)
				shift
				askyn "Format $1 ext4?" || return
				askyn "Check for bad blocks?" && BBOPT=cc;;
	 esac
	 mke2fs -t ext4 -${BBOPT}E lazy_itable_init=1,discard \
		  -O dir_index,extent,flex_bg,has_journal,uninit_bg,large_file,resize_inode,sparse_super ${1} \
		  || askyn "mkfs failed. Continue?"
			  #tune2fs 
}
