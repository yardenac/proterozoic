#!/bin/bash
depend_procedure core base
[ -f /usr/share/ppz/bash.functions ] && . /usr/share/ppz/bash.functions

TARGET=/media/targay
MNTPTS=( /boot ) # / is implied

unmount_all() {
	 local RV=0
	 for MNTD_FS in /proc /sys /dev ${MNTPTS[@]} /; do
		  local FULLPATH=${TARGET}${MNTD_FS}
		  grep -iq ${FULLPATH%%\/} /etc/mtab \
				&& {
				umount ${FULLPATH%%\/} || RV=1
		  }
	 done
	 return $RV
}

start_process() {
	 pushtrap 'poptrap; unmount_all; exit $?;' HUP QUIT EXIT INT ABRT TERM
	 #execute worker configure #just does i/o stuff i dont use
	 execute worker sysprep #remounts / rw
	 usetvar TARGET 'Choose a temporary mount point: '
	 unmount_all || {
		  mount
		  until askyn "Unmounting all failed. You'll have to deal with that first. Whenever you're ready... :)"; do :; done
	 }
	 echo_red "YOU SHOULD HAVE ALREADY PARTITIONED - A LIST TO HELP YOU ;)"
	 blkid | grep -ivE 'raid|crypto_LUKS|squashfs' | sort -u
	 rm -f /tmp/ppz-fstab
	 for MNTPT in / ${MNTPTS[@]}; do
		  local DEV=
		  until [ -b "${DEV}" ]; do
				[ "$DEV" ] && partprobe 2>&1 | grep -iv /dev/sr0
				usetvar DEV "CHOOSE A PARTITION FOR $MNTPT (^c to partprobe): " /dev/
				DEV=$(readlink -e ${DEV})
		  done
		  askyn "Format $DEV ext4?" && {
				askyn "Check for bad blocks?" && BBOPT=cc || BBOPT=q
				mke2fs -t ext4 -${BBOPT}E lazy_itable_init=1,discard \
					 -O dir_index,extent,flex_bg,has_journal,uninit_bg,large_file,resize_inode,sparse_super ${DEV} \
					 || askyn "mkfs failed. Continue?"
			  #tune2fs 
		  }
		  mkdir -p ${TARGET}${MNTPT}
		  mount ${DEV} ${TARGET}${MNTPT}
		  cat >> /tmp/ppz-fstab <<-EOF
				UUID="$(blkid -s UUID -o value ${DEV})" ${MNTPT}	ext4 defaults,noatime,nodiratime,barrier=1,commit=30,ro 0 1
				EOF
		  enhash targmnt${MNTPT//\/} ${DEV}
	 done
	 mkdir -pm 755 ${TARGET}/{dev,proc,sys,var/{cache/pacman/pkg,lib/pacman,log}}
	 for SPECIAL_FS in proc sys dev; do
		  grep -iq ${TARGET}/${SPECIAL_FS} /etc/mtab || {
				case $SPECIAL_FS in
					 proc)	mount -t proc	none	${TARGET}/proc;;
					 sys)	mount -t sysfs	none	${TARGET}/sys;;
					 dev)	mount -o bind	/dev	${TARGET}/dev;;
				esac
		  }
	 done
	 [ -a ${TARGET}/etc/rc.conf ] \
		  && askyn "Base system already looks populated ... skip reinstalling that?" \
		  || pacman --config /usr/share/ppz/default-pacman.conf \
		  --root ${TARGET} \
		  --cachedir ${TARGET}/var/cache/pacman/pkg \
		  --dbpath ${TARGET}/var/lib/pacman \
		  --logfile ${TARGET}/var/log/pacman.log \
		  --noprogressbar --noconfirm -Syq initscripts
	 grep -iq oxygen ${TARGET}/etc/fstab &>/dev/null \
		  && askyn "Looks like we already did some basic configging ... skip that?" || {
		  set +o noclobber
		  cp -f /usr/share/ppz/default-rc.conf ${TARGET}/etc/rc.conf
		  usetvar    HOSTNAME "Choose a new hostname! Take your time ;) " new_arch_machine_$(date +%Y_%m_%d)
		  usetvar    XRGUSER "Choose name of X user to boot into (blank for none): " '' ''
		  usetvar    ENCUSER "Choose name of encrypted user (blank for none): " '' ''
		  sed -i \
				-e s/%SET_HOSTNAME%/${HOSTNAME}/ig \
				-e s/%SET_XRGUSER%/${XRGUSER}/ig \
				-e s/%SET_ENCUSER%/${ENCUSER}/ig ${TARGET}/etc/rc.conf
		  chroot ${TARGET} /usr/sbin/useradd -lMNd /etc/skel.ppz  -u 54344 ${XRGUSER}
		  chroot ${TARGET} /usr/sbin/useradd -lMNd /media/encuser -u 54345 -s /usr/bin/womb ${ENCUSER}
		  cat >  ${TARGET}/etc/fstab <<-EOF
				devpts /dev/pts devpts defaults 0 0
				UUID=4C93-65D0  /media/oxygen   vfat    defaults,user,noatime,nodiratime,fmask=177,dmask=077,check=s 0 0
				EOF
		  cat >> ${TARGET}/etc/fstab < /tmp/ppz-fstab
		  rm -f /tmp/ppz-fstab
		  cp -i {,${TARGET}}/etc/localtime
		  set -o noclobber
	 }
	 [ -a ${TARGET}/usr/bin/mplayer ] && "System looks FULLY installed! Spare the poor mirrors a repeat?" || {
		  pkgs_groups=(desktop wireless laptop neverneed)
		  pkgs_desktop=(xorg-{server,xinit,xrdb,xsetroot,xhost,xwininfo} xf86-input-{keyboard,mouse} \
				consolekit fvwm perl-xml-parser xscreensaver fbpanel xclip wmctrl \
				seamonkey mplayer urxvt-url-select gimp) #squeaker
		  pkgs_wireless=(wpa_supplicant) #wpa_actiond ifplugd
		  pkgs_laptop=(pcmciautils dhcpcd)
		  pkgs_neverneed=(licenses logrotate lvm2 nano ppp reiserfsprogs xfsprogs)
		  pkgs_go=($(comm -23 \
				<(pacman --config /usr/share/ppz/default-pacman.conf -Sgq base | sort -u) \
				<(eval eval list_sorted '\$\{pkgs_'$(commalist ${pkgs_groups[@]})'[@]\}') \
				))
		  local A=; for A in ${pkgs_groups[@]}; do
				eval askyn 'Install $A things? \(${pkgs_'$A'[@]}\)' && eval 'pkgs_go+=(${pkgs_'$A'[@]})'
		  done
		  pkgs_go+=(btrfs-progs-unstable proterozoic) # grub2-bios
		  usetvar others "Type in any other packages you want to add: " 'nvidia' ''
		  pkgs_go+=(${others//,/ })
		  pacman --config /usr/share/ppz/default-pacman.conf \
				--root ${TARGET} \
				--cachedir ${TARGET}/var/cache/pacman/pkg \
				--dbpath ${TARGET}/var/lib/pacman \
				--logfile ${TARGET}/var/log/pacman.log \
				--noprogressbar --noconfirm --needed -Sq ${pkgs_go[@]}
		  cp -f ${TARGET}/{usr/share/ppz/default,etc/}-pacman.conf
	 }
	 askyn "Use present net config as static on target?" && {
		  cp -f {,${TARGET}}/etc/resolv.conf
		  ifconfig | awk -f <(cat <<-'EOF'
				/^lo/ {exit}
				$1 ~ /^inet$/ {
					sub(/addr:/ ,"address=",$2)
					sub(/Bcast:/,"broadcast=",$3)
					sub(/Mask:/ ,"netmask=",$4)
					print $2 "\n" $3 "\n" $4
				}
				EOF
		  ) >> ${TARGET}/etc/rc.conf
		  ip route show | awk '/^default via/ {print "gateway=" $3 "\ninterface=" $5}' >> ${TARGET}/etc/rc.conf
	 }
	 askyn "Set root password now?" && {
		  while true; do
				chroot ${TARGET} passwd root && break
		  done
	 }
	 grep -iqE '^HOOKS="[^"]*ppz_tmp[^"]*"' ${TARGET}/etc/mkinitcpio.conf || {
		  askyn "Add ppz_tmp to HOOKS?" \
				&& sed -i 's/^\(HOOKS="[^"]*\)"/\1 ppz_tmp"/ig' ${TARGET}/etc/mkinitcpio.conf
	 }
	 usetvar mmodules "Add any initrd modules (delete what you dont want): " 'nvidia' ''
	 sed -i 's/^\(MODULES="[^"]*\)"/\1 '"${mmodules[@]}"'"/ig' ${TARGET}/etc/mkinitcpio.conf
	 grex ${TARGET}/etc/mkinitcpio.conf
	 askyn "Above is ${TARGET}/etc/mkinitcpio.conf. You have a chance to edit
in another tty, if you wish. YES here to rebuild." && {
		  chroot ${TARGET} /sbin/mkinitcpio -p kernel26
	 }
	 askyn "Install grub? (un/freeze XFS if you have to...)" && {
		  cp -a ${TARGET}/usr/lib/grub/i386-pc/* ${TARGET}/boot/grub/
		  local DMAPF=/tmp/grub-device-map-ppz
		  echo "quit" | ${TARGET}/sbin/grub --no-floppy --device-map ${DMAPF}
		  local BOOT_DEVICE_CN=$(unhash targmntboot)
		  local BOOT_RAWDEVICE=$(unhash targmntboot | sed 's/[0-9]*$//')
		  local BOOT_PARTNUMBR=$(unhash targmntboot | sed 's/^[^0-9]*//')
		  let BOOT_PARTNUMBR-- || echo "partition number was zero -- wtf??"
		  local BIOS_HDNUM=$(awk '$2 == "'$BOOT_RAWDEVICE'" {gsub(/[()]/,"",$1);print $1}' ${DMAPF})
		  local GRUB_DEV="(${BIOS_HDNUM},${BOOT_PARTNUMBR})"
		  local ROOT_UUID=$(blkid -o value -s UUID ${BOOT_DEVICE_CN})
		  cp -f ${TARGET}{/usr/share/ppz/default-menu.lst,/boot/grub/menu.lst}
		  sed -i \
				-e s/%SET_HOSTNAME%/${HOSTNAME}/ig \
				-e s/%SET_BOOTPART%/${GRUB_DEV}/ig \
				-e 's/%SET_ROOT_DEVICE%/\/dev\/disk\/by-uuid\/'${ROOT_UUID//\//\\\/}/ig ${TARGET}/boot/grub/menu.lst
		  while :; do
				echo STARTING @$GRUBPW@$GRUBPWDUB@
				usetvar GRUBPW "Enter a (raw) grub password, if you like: " '' '' -s # unset so doesnt need to be local
				echo THEN @$GRUBPW@$GRUBPWDUB@
				[ "$GRUBPW" ] || break
				usetvar GRUBPWDUB "And once more, please: " '' '' -s
				echo OR @$GRUBPW@$GRUBPWDUB@
				[ "$GRUBPW" = "$GRUBPWDUB" ] || {
					 echo_red "They did not match!"
					 continue
				}
				echo WEIRD @$GRUBPW@$GRUBPWDUB@
				local GHASH=$(echo -e "md5crypt\n${GRUBPW}\nquit" | ${TARGET}/sbin/grub --no-floppy \
					 --batch --device-map ${DMAPF} | sed 's/^Encrypted: //ig;t;d') #sed commands: only print if matched
				[ "$GHASH" ] && [ "$GHASH" = "${GHASH// }" ] \
					 && sed -i 's/%SET_PASSWORD%/'${GHASH//\//\\\/}'/ig' ${TARGET}/boot/grub/menu.lst \
					 || echo_red "Setting grub password failed somehow..."
				break
		  done
		  unset GHASH GRUBPW GRUBPWDUB
		  sed -i 's/\(^.*%SET_PASSWORD%\)/#\1/ig' ${TARGET}/boot/grub/menu.lst
		  sed 's/^/#/ig' ${DMAPF} >> ${TARGET}/boot/grub/menu.lst
		  grep -iqE '^[^#].*%SET_' ${TARGET}/boot/grub/menu.lst && askyn "Something is still wrong with
					${TARGET}/boot/grub/menu.lst. You should really check it..."
		  read -d W GRUBCOMMANDS <<-EOF

				device ($BIOS_HDNUM) $BOOT_RAWDEVICE
				geometry ($BIOS_HDNUM)
				root ($BIOS_HDNUM,$BOOT_PARTNUMBR)
				setup ($BIOS_HDNUM)
				EOF
		  askyn "ENTER to Install grub in MBR of ${BOOT_RAWDEVICE} aka ($BIOS_HDNUM),
					pointing to ${BOOT_DEVICE_CN} aka ($BIOS_HDNUM,$BOOT_PARTNUMBR),
					as follows: ${GRUBCOMMANDS}" \
				&& {
				echo "$GRUBCOMMANDS" | ${TARGET}/sbin/grub --no-floppy --batch --device-map ${DMAPF}
		  }
#		  rm -f ${DMAPF}
	 }
	 echo_red "Grub finished."
	 echo "You might want to edit these files:"
	 echo "		/boot/grub/menu.lst"
	 echo "		/etc/rc.conf"
	 echo "		/etc/resolv.conf"
	 echo "		/etc/profile.d/proxy.sh"
	 until askyn "ready to quit? (stuff will be unmounted)"; do
		  ll ${TARGET}/
	 done
	 unmount_all
	 poptrap
}
