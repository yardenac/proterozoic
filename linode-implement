#!/bin/bash
. usr/share/ppz/bash.functions
. ~/.linoderc
[ $API_KEY ] && [ $LINODEADDR ] || {
	 echo "You need to make a ~/.linoderc to initialize auth variables"
	 return 1
}
LINODEURL='https://api.linode.com?api_key='$API_KEY'&api_action='
linodeid=$(curl -sS ${LINODEURL}'linode.list' | jshon -e DATA -e 1 -e LINODEID)
ss_id=2511 #preference i guess
ss_file=$(readlink -e ./stackscript-this)

do_or_report() {
	 [ "$1" == "say" ] && {
		  local say=1
		  shift
	 } || local say=0
	 local result=$(curl -sS ${LINODEURL}"$@")
	 (( $(echo $result | jshon -e ERRORARRAY -l) )) && {
		  echo "FAILED AT: $*"
		  echo $result | jshon
		  return 1
	 }; :
	 (( $say )) && echo "$result"
	 return 0
}
block_for_job() { #returns when no more jobs pending
	 while (( $(curl -sS ${LINODEURL}'linode.job.list&linodeid='$linodeid'&pendingonly=1' | jshon -e DATA -l) )); do
		  echo -n .
		  sleep 1
	 done
	 echo done!
}
block_for_shutdown() { #returns when linode shuts itself down
	 echo -n "Waiting for linode to shut down..."
	 while :; do
		  local status=$(ssh $LINODEADDR.linode.com status)
		  case $status in
				'Powered Off')
					 echo done!
					 return;;
				Running|*)
					 echo -n .
					 sleep 5
					 continue
		  esac
	 done
}

destroy_running() {
	 local status=$(ssh $LINODEADDR.linode.com status)
	 echo "Linode status is: $status"
	 case $status in
		  'Powered Off') :;;
		  'Running')
				echo "Going to destroy running instance..."
				ssh $LINODEADDR.linode.com destroy;;
		  *) echo "unrecognized status string: $status"
	 esac
}
update_stackscript() { local SS_COMMIT_TXT
	 cmp -s $ss_file <(curl -sS ${LINODEURL}'stackscript.list&stackscriptid='$ss_id | jshon -e DATA -e 1 -e SCRIPT -u) && {
		  echo "Stackscript does not need updating"
		  return
	 }
	 usetvar SS_COMMIT_TXT "Please write a stackscript commit entry: " 'unnamed revision' ''
	 do_or_report 'stackscript.update&stackScriptID='$ss_id \
		  --data-urlencode script@$ss_file --data-urlencode rev_note="$SS_COMMIT_TXT" || return 1
}
delete_disks() {
	 while :; do
		  local disklist=$(curl -sS ${LINODEURL}'linode.disk.list&linodeid='$linodeid)
		  local numdisks=$(echo $disklist | jshon -e DATA -l)
		  echo "Disks left: $numdisks"
		  (( $numdisks )) || break # while there are disks left
		  local firstdiskid=$(echo $disklist | jshon -e DATA -e 1 -e DISKID)
		  echo -n "Deleting disk with id # $firstdiskid"
		  do_or_report 'linode.disk.delete&linodeid='$linodeid'&diskid='$firstdiskid || return 1
		  block_for_job
	 done
}
delete_configs() {
	 while :; do
		  local configlist=$(curl -sS ${LINODEURL}'linode.config.list&linodeid='$linodeid)
		  local numconfigs=$(echo $configlist | jshon -e DATA -l)
		  echo "Configs left: $numconfigs"
		  (( $numconfigs )) || break #while configs left
		  local firstconfig=$(echo $configlist | jshon -e DATA -e 1 -e ConfigID)
		  echo -n "Deleting config with id # $firstconfig"
		  do_or_report 'linode.config.delete&linodeid='$linodeid'&configid='$firstconfig || return 1
		  block_for_job
	 done
}
deploy() {
	 local ssdate=.$(date +%F.%k-%M-%S)
	 local udf_vars=$(sed 's_^#\s<UDF\s.*name="\([^"]*\)".*\s/>$_\1_ig;t;d;' ./stackscript-this)
	 local nvp_str result
	 local IFS=$'\n'
	 for v in $udf_vars; do
		  [ "$1" ] && {
				this_val="$1"
				shift
		  } || usetvar this_val "Enter value for ${v^^}: " BLANK ''
		  nvp_str+=\"${v}\":\"${this_val}\",
	 done
	 echo
	 echo -n "Creating disk image & config"
	 result=$(do_or_report say 'linode.disk.createfromstackscript&distributionid=58&label=D'$ssdate'&size=16384&linodeid='$linodeid'&stackscriptid='$ss_id \
		  --data-urlencode stackscriptudfresponses=\{"${nvp_str%,}"\} \
		  --data-urlencode rootpass="$rootpass") || return 1
	 diskid=$(echo $result | jshon -e DATA -e DiskID)
	 # 138 = Latest 3.0 (3.0.4-x86_64-linode21)
	 result=$(do_or_report say 'linode.config.create&kernelid=95&helper_xen=false&helper_automount=false&helper_depmod=false&label=G'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=$diskid,,,,,,,,) || return 1 #pv-grub
	 config_pvgrub=$(echo $result | jshon -e DATA -e ConfigID)
	 result=$(do_or_report say 'linode.config.create&kernelid=61&label=F'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=25665,$diskid,,,,,,,25669) || return 1 #finnix rescue
	 config_finnix=$(echo $result | jshon -e DATA -e ConfigID)
	 result=$(do_or_report say 'linode.config.create&kernelid=138&label=C'$ssdate'&linodeid='$linodeid \
		  --data-urlencode disklist=$diskid,,,,,,,,) || return 1 #pre-linux-linode boot
	 config_prebuilt=$(echo $result | jshon -e DATA -e ConfigID)
	 block_for_job
	 echo -n "Booting now"
	 do_or_report 'linode.boot&linodeid='$linodeid'&configid='$config_prebuilt || return 1
	 block_for_job
	 block_for_shutdown
	 echo -n "Booting the REAL one now!"
	 do_or_report 'linode.boot&linodeid='$linodeid'&configid='$config_pvgrub || return 1
	 block_for_job
}
do_all() {
	 askyn "This script will DESTROY YOUR EXISTING LINODE. Do you want to cancel?" && exit
	 for thing in \
		  destroy_running \
		  update_stackscript \
		  delete_disks \
		  delete_configs \
		  deploy; do

		  say_and_do $thing "$@" && continue
		  echo "$thing failed..."
		  return 1
	 done
}
do_all "$@"
